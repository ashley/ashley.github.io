{"version":3,"sources":["webpack:///./src/components/PostsListing.module.scss","webpack:///./src/components/PostListing.js","webpack:///./src/pages/blog.js"],"names":["module","exports","PostListing","postEdges","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","categories","cover","title","date","excerpt","timeToRead","getPostList","className","styles","articleList","map","post","to","key","articleBox","right","meta","join","postCoverImage","src","alt","BlogPage","data","config","siteTitle","allMarkdownRemark","edges","pageQuery"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,YAAc,2CAA2C,WAAa,0CAA0C,MAAQ,oCAAoC,KAAO,mCAAmC,eAAiB,iD,kCCDzO,0DAiDeC,IA7CK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAkBfC,EAjBc,WAClB,IAAMA,EAAW,GAajB,OAZAD,EAAUE,SAAQ,SAAAC,GAChBF,EAASG,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAChCE,WAAYR,EAASG,KAAKI,YAAYC,WACtCC,MAAOT,EAASG,KAAKI,YAAYE,MACjCC,MAAOV,EAASG,KAAKI,YAAYG,MACjCC,KAAMX,EAASG,KAAKC,OAAOO,KAC3BC,QAASZ,EAASG,KAAKS,QACvBC,WAAYb,EAASG,KAAKU,gBAGvBf,EAGQgB,GACjB,OACE,yBAAKC,UAAWC,IAAOC,aAErBnB,EAASoB,KAAI,SAAAC,GAAI,OACf,kBAAC,OAAD,CAAMC,GAAID,EAAKjB,KAAMmB,IAAKF,EAAKT,OAC7B,6BAASK,UAAWC,IAAOM,YACzB,yBAAKP,UAAWC,IAAOO,OACrB,4BAAKJ,EAAKT,OACV,yBAAKK,UAAWC,IAAOQ,MACpBL,EAAKR,KADR,MACsB,8BAAOQ,EAAKX,WAAWiB,KAAK,QAAe,IADjE,KAEWN,EAAKN,WAFhB,YAEqC,KAErC,yBACEE,UAAWC,IAAOU,eAClBC,IAAKR,EAAKV,MACVmB,IAAI,iBAEN,2BAAIT,EAAKP,kB,kCCxCvB,4IAgBeiB,UATE,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACf,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,CAAQpB,MAAK,UAAYqB,IAAOC,YAChC,kBAAC,IAAD,CAAanC,UAAWiC,EAAKG,kBAAkBC,WAQ9C,IAAMC,EAAS","file":"component---src-pages-blog-js-d749061b756630d8d500.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"articleList\":\"PostsListing-module--article-list--3ReSK\",\"articleBox\":\"PostsListing-module--article-box--3M6_I\",\"right\":\"PostsListing-module--right--2MxCO\",\"meta\":\"PostsListing-module--meta--3cFzL\",\"postCoverImage\":\"PostsListing-module--post-cover-image--2iZ5N\"};","import React from 'react'\nimport { Link } from 'gatsby'\nimport styles from './PostsListing.module.scss'\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = []\n    postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      })\n    })\n    return postList\n  }\n\n  const postList = getPostList()\n  return (\n    <div className={styles.articleList}>\n      {/* Your post list here. */\n      postList.map(post => (\n        <Link to={post.path} key={post.title}>\n          <article className={styles.articleBox}>\n            <div className={styles.right}>\n              <h3>{post.title}</h3>\n              <div className={styles.meta}>\n                {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '}\n                &mdash; {post.timeToRead} Min Read{' '}\n              </div>\n              <img\n                className={styles.postCoverImage}\n                src={post.cover}\n                alt=\"post-picture\"\n              />\n              <p>{post.excerpt}</p>\n            </div>\n          </article>\n        </Link>\n      ))}\n    </div>\n  )\n}\n\nexport default PostListing\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport config from '../../data/SiteConfig'\nimport PostListing from '../components/PostListing'\n\nconst BlogPage = ({data}) => (\n  <Layout>\n    <main>\n      <Helmet title={`Blog | ${config.siteTitle}`} />\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\n    </main>\n  </Layout>\n)\n\nexport default BlogPage\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}